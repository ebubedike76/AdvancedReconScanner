#!/usr/bin/python3

import nmap
import os
import sys
import json
import subprocess
import re
from datetime import datetime

# Configuration
MSF_PATH = "/usr/share/metasploit-framework"
NIKTO_PATH = "/usr/bin/nikto"
TEMP_FILE = "/tmp/msf_commands.rc"

def print_banner():
    print(r"""
   ___                      _____                 _             
  / _ \___ ____ ___ _ ___  / ___/__  __ _  ___  (_)__  ___ ____
 / // / _ `/ _ `/  ' \_-< / /__/ _ \/  ' \/ _ \/ / _ \/ -_) __/
/____/\_,_/\_, /_/_/_/__/ \___/\___/_/_/_/ .__/_/_//_/\__/_/   
          /___/                          /_/                    
    """)
    print("Elite Network Reconnaissance & Exploitation Framework")
    print(f"Scan initiated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("<----------------------------------------------------->")

def save_results(ip, scan_data, filename=None):
    if not filename:
        filename = f"scan_results_{ip.replace('.','_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(filename, 'w') as f:
        json.dump(scan_data, f, indent=4)
    print(f"\n[+] Results saved to {filename}")

def os_detection(scanner, ip):
    try:
        print("\n[+] Attempting OS detection...")
        scanner.scan(ip, arguments='-O')
        if 'osclass' in scanner[ip]:
            for osclass in scanner[ip]['osclass']:
                print(f"OS Type: {osclass['type']}")
                print(f"OS Vendor: {osclass['vendor']}")
                print(f"OS Family: {osclass['osfamily']}")
                print(f"Accuracy: {osclass['accuracy']}%")
                print("------------------------")
    except Exception as e:
        print(f"[-] OS detection failed: {str(e)}")

def service_detection(scanner, ip, ports):
    try:
        print("\n[+] Running service version detection...")
        scanner.scan(ip, ports, arguments='-sV')
        service_info = {}
        
        for proto in scanner[ip].all_protocols():
            print(f"\nProtocol: {proto}")
            lport = scanner[ip][proto].keys()
            for port in sorted(lport):
                service = scanner[ip][proto][port]
                print(f"Port: {port}\tState: {service['state']}\tService: {service['name']}\tVersion: {service.get('product', '')} {service.get('version', '')}")
                service_info[port] = {
                    'protocol': proto,
                    'name': service['name'],
                    'product': service.get('product', ''),
                    'version': service.get('version', '')
                }
        return service_info
    except Exception as e:
        print(f"[-] Service detection failed: {str(e)}")
        return {}

def run_nikto(ip, port):
    try:
        print(f"\n[+] Running comprehensive Nikto scan on {ip}:{port}")
        cmd = f"{NIKTO_PATH} -h {ip} -p {port} -Tuning x 1 3 5 7 8 b -Display V -Format htm -output nikto_{ip}_{port}.html"
        print(f"[*] Executing: {cmd}")
        subprocess.run(cmd, shell=True, check=True)
        print(f"[+] Nikto HTML report saved to: nikto_{ip}_{port}.html")
    except subprocess.CalledProcessError as e:
        print(f"[-] Nikto scan failed: {str(e)}")
    except FileNotFoundError:
        print("[-] Nikto not found. Please install: sudo apt install nikto")

def generate_metasploit_script(ip, service_info):
    try:
        with open(TEMP_FILE, 'w') as f:
            f.write("""
# Metasploit automation script
# Generated by Elite Security Scanner

""")
            for port, info in service_info.items():
                service = info['name'].lower()
                product = info['product'].lower() if info['product'] else ""
                version = info['version'] if info['version'] else ""
                
                # Web Services
                if service in ['http', 'https', 'ssl', 'http-proxy']:
                    f.write(f"""
# Web service found on port {port}
use auxiliary/scanner/http/http_version
set RHOSTS {ip}
set RPORT {port}
run

use auxiliary/scanner/http/dir_scanner
set RHOSTS {ip}
set RPORT {port}
run

use auxiliary/scanner/http/files_dir
set RHOSTS {ip}
set RPORT {port}
run
""")
                    if 'apache' in product:
                        f.write(f"""
# Apache specific checks
use auxiliary/scanner/http/apache_userdir_enum
set RHOSTS {ip}
set RPORT {port}
run

use auxiliary/scanner/http/apache_mod_cgi_bash_env
set RHOSTS {ip}
set RPORT {port}
run
""")
                    elif 'iis' in product or 'microsoft' in product:
                        f.write(f"""
# IIS specific checks
use auxiliary/scanner/http/iis_shortname_scanner
set RHOSTS {ip}
set RPORT {port}
run
""")

                # Database Services
                elif service in ['mysql', 'postgresql', 'mssql', 'oracle']:
                    f.write(f"""
# Database service found on port {port}
use auxiliary/scanner/{service}/{service}_login
set RHOSTS {ip}
set RPORT {port}
set USER_FILE /usr/share/wordlists/metasploit/default_users.txt
set PASS_FILE /usr/share/wordlists/metasploit/default_passwords.txt
run
""")

                # SMB Services
                elif service == 'microsoft-ds' or service == 'netbios-ssn':
                    f.write(f"""
# SMB service found on port {port}
use auxiliary/scanner/smb/smb_version
set RHOSTS {ip}
set RPORT {port}
run

use auxiliary/scanner/smb/smb_enumshares
set RHOSTS {ip}
run

use auxiliary/scanner/smb/smb_enumusers
set RHOSTS {ip}
run
""")

                # SSH Services
                elif service == 'ssh':
                    f.write(f"""
# SSH service found on port {port}
use auxiliary/scanner/ssh/ssh_version
set RHOSTS {ip}
set RPORT {port}
run

use auxiliary/scanner/ssh/ssh_login
set RHOSTS {ip}
set RPORT {port}
set USER_FILE /usr/share/wordlists/metasploit/default_users.txt
set PASS_FILE /usr/share/wordlists/metasploit/default_passwords.txt
run
""")

                # FTP Services
                elif service == 'ftp':
                    f.write(f"""
# FTP service found on port {port}
use auxiliary/scanner/ftp/ftp_version
set RHOSTS {ip}
set RPORT {port}
run

use auxiliary/scanner/ftp/anonymous
set RHOSTS {ip}
set RPORT {port}
run

use auxiliary/scanner/ftp/ftp_login
set RHOSTS {ip}
set RPORT {port}
set USER_FILE /usr/share/wordlists/metasploit/default_users.txt
set PASS_FILE /usr/share/wordlists/metasploit/default_passwords.txt
run
""")

            f.write("\nexit\n")
        
        print(f"[+] Metasploit script generated: {TEMP_FILE}")
        return True
    except Exception as e:
        print(f"[-] Error generating Metasploit script: {str(e)}")
        return False

def run_metasploit(ip, service_info):
    try:
        if not generate_metasploit_script(ip, service_info):
            return False
            
        print("\n[+] Launching Metasploit with automated modules...")
        cmd = f"msfconsole -q -r {TEMP_FILE}"
        print(f"[*] Executing: {cmd}")
        subprocess.run(cmd, shell=True, check=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"[-] Metasploit execution failed: {str(e)}")
        return False
    except FileNotFoundError:
        print("[-] Metasploit not found. Please install: sudo apt install metasploit-framework")
        return False

def web_vulnerability_checks(scanner, ip, ports):
    try:
        print("\n[+] Starting comprehensive web assessment")
        service_info = service_detection(scanner, ip, ports)
        
        for port in ports.split(','):
            port = port.strip()
            if not port.isdigit():
                continue
                
            port = int(port)
            if str(port) in service_info:
                run_nikto(ip, port)
                
                if input(f"\n[?] Run Metasploit web modules against {ip}:{port}? (y/n): ").lower() == 'y':
                    web_service_info = {str(port): service_info[str(port)]}
                    run_metasploit(ip, web_service_info)
    except Exception as e:
        print(f"[-] Web vulnerability checks failed: {str(e)}")

def aggressive_scan(scanner, ip):
    try:
        print("\n[+] Running elite comprehensive scan")
        scanner.scan(ip, arguments='-A -T4 --script vuln,exploit')
        print(scanner.scaninfo())
        
        print("\n[+] Critical findings:")
        for host in scanner.all_hosts():
            print(f"\nHost: {host} ({scanner[host].hostname()})")
            print(f"State: {scanner[host].state()}")
            
            for proto in scanner[host].all_protocols():
                print(f"\nProtocol: {proto}")
                ports = scanner[host][proto].keys()
                for port in sorted(ports):
                    service = scanner[host][proto][port]
                    print(f"Port: {port}\tState: {service['state']}\tService: {service['name']}")
                    
                    if 'script' in service:
                        for script, output in service['script'].items():
                            if 'vulnerable' in output.lower() or 'vuln' in script.lower():
                                print(f"  [!] {script}:")
                                print(f"      {output}")
    except Exception as e:
        print(f"[-] Comprehensive scan failed: {str(e)}")

def main():
    Scanner = nmap.PortScanner()
    print_banner()

    try:
        ip_addr = input("[+] Enter IP address or range to scan: ")
        print(f"[+] Target: {ip_addr}")

        print("\n[+] Select operation mode:")
        print("1) Quick Recon (Top 1000 ports)")
        print("2) Full Port Scan (All 65535 ports)")
        print("3) Web Application Audit")
        print("4) Comprehensive Security Assessment")
        print("5) Custom Scan Profile")
        print("6) Stealth Penetration Test")
        
        resp = input("\n[>] Enter your choice: ")
        
        scan_data = {}
        service_info = {}
        
        if resp == '1':
            print("\n[+] Starting quick reconnaissance...")
            Scanner.scan(ip_addr, arguments='-v -sS --top-ports 1000')
            scan_data = Scanner[ip_addr]
            
        elif resp == '2':
            print("\n[+] Starting full port enumeration...")
            Scanner.scan(ip_addr, '1-65535', '-v -sS')
            scan_data = Scanner[ip_addr]
            
        elif resp == '3':
            web_ports = input("\n[+] Enter web ports (comma separated, default 80,443,8080,8443): ") or "80,443,8080,8443"
            service_info = service_detection(Scanner, ip_addr, web_ports)
            web_vulnerability_checks(Scanner, ip_addr, web_ports)
            return
            
        elif resp == '4':
            aggressive_scan(Scanner, ip_addr)
            service_info = service_detection(Scanner, ip_addr, '1-65535')
            
            if input("\n[?] Run targeted Metasploit modules based on findings? (y/n): ").lower() == 'y':
                run_metasploit(ip_addr, service_info)
            return
            
        elif resp == '5':
            custom_args = input("\n[+] Enter custom Nmap arguments: ")
            print(f"\n[+] Running custom scan: nmap {custom_args}")
            Scanner.scan(ip_addr, arguments=custom_args)
            scan_data = Scanner[ip_addr]
            
        elif resp == '6':
            print("\n[+] Starting stealth penetration test...")
            print("1) FIN Scan")
            print("2) Xmas Scan")
            print("3) Null Scan")
            print("4) Idle Scan (Zombie)")
            stealth_type = input("[>] Select stealth technique: ")
            
            if stealth_type == '1':
                Scanner.scan(ip_addr, arguments='-sF -v -T2')
            elif stealth_type == '2':
                Scanner.scan(ip_addr, arguments='-sX -v -T2')
            elif stealth_type == '3':
                Scanner.scan(ip_addr, arguments='-sN -v -T2')
            elif stealth_type == '4':
                zombie_ip = input("[+] Enter zombie IP for idle scan: ")
                Scanner.scan(ip_addr, arguments=f'-sI {zombie_ip} -v -T2')
            scan_data = Scanner[ip_addr]
            
        else:
            print("[-] Invalid option selected")
            sys.exit(1)

        print("\n[+] Scan completed!")
        print(f"\n[+] Host status: {Scanner[ip_addr].state()}")
        
        if len(Scanner[ip_addr].all_protocols()) > 0:
            service_info = {}
            print("\n[+] Discovered services:")
            for proto in Scanner[ip_addr].all_protocols():
                print(f"\nProtocol: {proto}")
                ports = Scanner[ip_addr][proto].keys()
                for port in sorted(ports):
                    service = Scanner[ip_addr][proto][port]
                    print(f"Port: {port}\tState: {service['state']}\tService: {service['name']}\tVersion: {service.get('product', '')} {service.get('version', '')}")
                    service_info[port] = {
                        'protocol': proto,
                        'name': service['name'],
                        'product': service.get('product', ''),
                        'version': service.get('version', '')
                    }
        
        if input("\n[?] Perform OS detection? (y/n): ").lower() == 'y':
            os_detection(Scanner, ip_addr)
            
        if input("\n[?] Perform service version detection? (y/n): ").lower() == 'y':
            ports = ','.join([str(p) for proto in Scanner[ip_addr].all_protocols() for p in Scanner[ip_addr][proto].keys()])
            service_info = service_detection(Scanner, ip_addr, ports)
            
        if len(service_info) > 0 and input("\n[?] Run targeted Metasploit modules? (y/n): ").lower() == 'y':
            run_metasploit(ip_addr, service_info)
            
        if input("\n[?] Save results to file? (y/n): ").lower() == 'y':
            save_results(ip_addr, scan_data)
            
    except KeyboardInterrupt:
        print("\n[-] Scan interrupted by user")
        sys.exit(0)
    except Exception as e:
        print(f"[-] Error occurred: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    if not sys.platform.startswith('win'):
        if os.geteuid() != 0:
            print("[-] Some scans require root privileges. Consider running with sudo.")
            if input("[?] Continue with limited functionality? (y/n): ").lower() != 'y':
                sys.exit(1)
    
    main()